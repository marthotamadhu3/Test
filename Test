import java.io.File;
import java.io.IOException;

public class SecureFileUtil {
    // 1) Compute the canonical base dir once:
    private static final String BASE_CANONICAL;
    static {
        try {
            BASE_CANONICAL = new File("/safe/base/directory")
                                  .getCanonicalPath()
                             + File.separator;
        } catch (IOException e) {
            throw new ExceptionInInitializerError(e);
        }
    }

    /**
     * Returns a safe File under BASE_CANONICAL for a simple filename.
     * No new File(base, filename) or Paths.get() on raw input anywhere.
     */
    public static File getSafeFile(String filename) throws IOException {
        // 2) Whitelist: no separators or traversal bits at all
        if (filename == null || !filename.matches("[A-Za-z0-9._-]+")) {
            throw new SecurityException("Invalid filename");
        }

        // 3) Build *one* combined string and canonicalize it
        String candidate = BASE_CANONICAL + filename;
        File canonicalFile = new File(candidate).getCanonicalFile();

        // 4) Single prefix check on the resulting canonical string
        if (!canonicalFile.getPath().startsWith(BASE_CANONICAL)) {
            throw new SecurityException("Path traversal denied");
        }

        return canonicalFile;
    }
}
