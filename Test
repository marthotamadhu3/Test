import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;

public class SafePathUtil {
    // (1) Define your safe root once:
    private static final Path BASE_DIR = 
        Paths.get("/safe/base/directory")
             .toAbsolutePath()
             .normalize();

    /**
     * Resolve a user-supplied filename (or relative path) under BASE_DIR,
     * then normalize + canonicalize and verify that nothing ever escapes.
     *
     * @param userInput  relative path segment(s), e.g. "docs/report.txt"
     * @return           a safe Path you can hand to any Files API
     * @throws IOException         if I/O fails during canonicalization
     * @throws SecurityException   if the final path is outside BASE_DIR
     */
    public static Path getSafePath(String userInput) throws IOException {
        if (userInput == null || userInput.isEmpty()) {
            throw new IllegalArgumentException("Missing path input");
        }

        // (2) Resolve *relative* to your base, then clean up "..", "." etc.
        Path candidate = BASE_DIR.resolve(userInput).normalize();

        // (3) Canonicalize via the file system (handles symlinks)
        //     NOFOLLOW_LINKS prevents following symlinks if you prefer
        Path real = candidate.toRealPath(LinkOption.NOFOLLOW_LINKS);

        // (4) Single, crystal-clear containment check
        if (!real.startsWith(BASE_DIR)) {
            throw new SecurityException(
              "Path traversal attempt blocked: " + userInput);
        }

        return real;
    }
}
